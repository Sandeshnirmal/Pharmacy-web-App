Here is a detailed explanation of the order placement flow in the Pharmacy web application, covering both the Flutter mobile frontend and the Django backend, with a focus on the Razorpay integration and prescription handling.

### Order Placement Flow

The order placement process is designed to be robust, handling both Cash on Delivery (COD) and online payments (via Razorpay), as well as optional prescription uploads.

#### 1. Frontend: User Initiates Checkout (`CheckoutScreen.dart`)

*   **Cart & Address Selection**: The user adds items to their cart and proceeds to the `CheckoutScreen`. Here, they select a delivery address from their saved addresses.
*   **Prescription Requirement Check**: The system checks if any items in the cart require a prescription. If so, the user is prompted to upload a prescription image. This image is converted to a Base64 string for transmission.
*   **Payment Method Selection**: The user chooses between "Cash on Delivery" (COD) and "UPI" (which integrates with Razorpay).
*   **Initiate Order Placement (`_placeOrder` method)**:
    *   **Validation**: Before proceeding, the system validates that a delivery address is selected and, if required, a prescription image is uploaded.
    *   **Create Pending Order (Backend Call)**: For both COD and UPI, the frontend first calls the `OrderService.createPendingOrder` method. This sends the cart items, delivery address, payment method (e.g., 'COD' or 'RAZORPAY'), total amount, notes, and prescription details (if any) to the backend.
        *   **Purpose**: This step is crucial. It creates an initial "pending" order record in the backend database and returns a unique, numeric `order_id` (our internal order ID). This `order_id` is essential for subsequent payment processing and order finalization.
        *   **Frontend Storage**: The returned `order_id` is stored in the `_currentBackendOrderId` state variable in `CheckoutScreen.dart`.

#### 2. Payment Processing (Conditional based on Payment Method)

*   **A. Cash on Delivery (COD)**:
    *   If "Cash on Delivery" is selected, after the pending order is successfully created on the backend, the frontend immediately calls `_placeOrderAfterPayment` (which is `OrderService.finalizeOrderWithPaymentDetails`) with `paymentId`, `razorpayOrderId`, and `razorpaySignature` set to 'COD'.
    *   The backend then finalizes this order, marking it as 'Paid' (or 'Pending' depending on the exact backend logic for COD) and 'payment_completed'.

*   **B. UPI (Razorpay Integration)**:
    *   If "UPI" is selected, after the pending order is successfully created and its `order_id` is obtained, the frontend calls `PaymentService.processOrderPayment`.
    *   **`PaymentService.processOrderPayment`**:
        *   This method first calls the backend endpoint `ApiConfig.createPaymentUrl` (which maps to `backend/payment/views.py::create_payment_order`). It passes the `amount`, `currency`, and the **backend's numeric `order_id`** (from the pending order).
        *   **Backend (`create_payment_order` endpoint)**: This endpoint receives the `order_id`, retrieves the corresponding `Order` object, and then interacts with the Razorpay API to create a new Razorpay order. It returns the `razorpay_order_id` (Razorpay's unique ID for the transaction) to the frontend.
        *   **Initiate Razorpay UI**: Upon receiving the `razorpay_order_id` from the backend, `PaymentService.processOrderPayment` then uses the `Razorpay` Flutter plugin to open the Razorpay payment gateway UI. It pre-fills user details (name, email, phone) obtained from the `_user` model in `CheckoutScreen.dart`.
    *   **Razorpay Callbacks (`_handlePaymentResult` method)**:
        *   The `PaymentService` listens for events from the Razorpay UI (success, error, external wallet).
        *   **Payment Success**: If the payment is successful, Razorpay returns `paymentId`, `orderId` (Razorpay's order ID), and `signature`. `PaymentService` immediately calls its own `verifyPayment` method, which sends these details to the backend endpoint `ApiConfig.verifyPaymentUrl` (mapping to `backend/payment/views.py::verify_payment`).
            *   **Backend (`verify_payment` endpoint)**: This endpoint verifies the `signature` using Razorpay's secret key to ensure the payment's authenticity. If verified, it updates the `Payment` record in the database to 'completed' and updates the associated `Order`'s `payment_status` to 'Paid' and `order_status` to 'payment_completed'.
            *   **Frontend Notification**: After successful verification, `PaymentService` emits a `PaymentResult` (success) through its `onPaymentResult` stream.
        *   **Payment Failure**: If the payment fails, `PaymentService` emits a `PaymentResult` (failure) with an error message.
    *   **Frontend Handles Result**: The `_handlePaymentResult` listener in `CheckoutScreen.dart` receives the `PaymentResult`.
        *   **On Success**: It calls `_placeOrderAfterPayment` (i.e., `OrderService.finalizeOrderWithPaymentDetails`), passing the backend's `_currentBackendOrderId` and the Razorpay payment details (`paymentId`, `razorpayOrderId`, `razorpaySignature`). This finalizes the order on the backend.
        *   **On Failure**: It displays a toast message indicating payment failure.

#### 3. Frontend: Post-Payment Actions

*   **Order Finalization (`_placeOrderAfterPayment` method)**:
    *   This method calls `_orderService.finalizeOrderWithPaymentDetails` on the backend. This endpoint updates the order status, links the payment details, and performs any other necessary post-payment processing.
    *   **Backend (`create_paid_order_for_prescription` endpoint)**: This endpoint receives the existing `order_id` and payment details, updates the order's status to `payment_completed`, `payment_status` to `Paid`, and records the payment information.
*   **Clear Cart**: Upon successful order finalization, the user's cart is cleared.
*   **Navigate to Confirmation**: The user is navigated to the `OrderConfirmationScreen`, displaying the details of their newly placed order.

#### 4. Backend: Order Lifecycle

*   **Order Status History**: Throughout the process, `OrderStatusHistory` records are created to track changes in the order's status (e.g., from 'Pending' to 'payment_completed').
*   **Prescription Status**: For prescription orders, the `prescription_status` field in the `Order` model is initially set to 'pending_review' and is updated as the prescription is verified by an admin.
*   **Order Tracking**: Further backend processes (e.g., admin verification, courier scheduling) will update the order's status and tracking information, which can be retrieved by the frontend.

This flow ensures that an order is only fully confirmed and processed after a successful payment (or explicit COD selection) and that all necessary details are linked correctly between the frontend, backend, and Razorpay.
