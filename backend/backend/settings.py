"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wl&re62()vv=7)-zanf622cw5^gt-xyyu(8vf1ox^4had=8-u='

# Google AI API Key for OCR
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY', 'AIzaSyA8JFwu5DpLSKBfTTk2K3dUW61y32gZeoo')

# Razorpay Configuration (Update with your actual keys)
RAZORPAY_KEY_ID = 'rzp_test_u32HLv2OyCBfAN'  # Test key
RAZORPAY_KEY_SECRET = 'Owlg61rwtT7V3RQKoYGKhsUC'  # Test secret

# For production, use environment variables:
# RAZORPAY_KEY_ID = os.environ.get('RAZORPAY_KEY_ID')
# RAZORPAY_KEY_SECRET = os.environ.get('RAZORPAY_KEY_SECRET')

# TPC Courier Configuration
TPC_API_ENDPOINT = os.environ.get('TPC_API_ENDPOINT', 'https://www.tpcglobe.com') # Placeholder
TPC_API_KEY = os.environ.get('TPC_API_KEY', '0236') # Placeholder
TPC_API_SECRET = os.environ.get('TPC_API_SECRET', 'Admin@123') # Placeholder

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',  # Add for token authentication
    'rest_framework_simplejwt',
    'django_filters',
    'product',
    'orders',
    'prescriptions',
    'usermanagement',
    'inventory',
    'authentication',  # Authentication app for mobile API
    'payment',  # Payment app for Razorpay integration
    'courier',  # Professional courier integration
    'company_details', # App to store company details
]

# CORS Configuration for Admin Dashboard and Mobile App
CORS_ALLOW_ALL_ORIGINS = True  # For development only

# Allowed origins for production (comment out CORS_ALLOW_ALL_ORIGINS for production)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React development server
    "http://localhost:5173",    # Vite development server
    "http://localhost:5174",    # Vite development server (alternative port)
    "http://localhost:5175",    # Vite development server (alternative port)
    "http://127.0.0.1:3000",    # React development server
    "http://127.0.0.1:5173",    # Vite development server
    "http://127.0.0.1:5174",    # Vite development server
    "http://127.0.0.1:5175",    # Vite development server
    "http://localhost:8080",    # Mobile app development
    "http://127.0.0.1:8080", 
    "http://192.168.77.6:8000",      # Mobile app development
    "http://192.168.129.6:8001",     # Current Linux machine IP
    "http://192.168.129.6:5174",     # Frontend development server
    "http://192.168.129.6:3000",     # Alternative frontend port
]

# Allow credentials for authentication
CORS_ALLOW_CREDENTIALS = True

# Allowed headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'x-forwarded-for',
    'x-forwarded-proto',
]

# Allowed methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Expose headers to frontend
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
]

# Preflight cache time
CORS_PREFLIGHT_MAX_AGE = 86400

# Additional CORS settings for mobile app compatibility
CORS_ALLOW_PRIVATE_NETWORK = True

# Security settings for CORS
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# CSRF settings for mobile app compatibility
CSRF_TRUSTED_ORIGINS = [
    'http://192.168.77.6:8000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://192.168.129.6:8001',
    'http://192.168.129.6:5174',
    'http://192.168.129.6:3000',
]

# Disable CSRF for API endpoints (since we disabled the middleware)
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False

AUTH_USER_MODEL = 'usermanagement.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be first
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # Disabled for API endpoints
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
APPEND_SLASH = True

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',  # Add for mobile app
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Keep for Django Admin/Browsable API
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny', # Allow unauthenticated access for registration
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}





# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Short-lived access tokens
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),   # Longer-lived refresh tokens
#     'ROTATE_REFRESH_TOKENS': True,                 # Rotate refresh tokens on use
#     'BLACKLIST_AFTER_ROTATION': True,              # Invalidate old refresh tokens
#     'UPDATE_LAST_LOGIN': True,                     # Update user's last login on token refresh

#     'ALGORITHM': 'HS256',
#     'SIGNING_KEY': 'django-insecure-wl&re62()vv=7)-zanf622cw5^gt-xyyu(8vf1ox^4had=8-u=', # Use your SECRET_KEY or a strong, separate key
#     'VERIFYING_KEY': None,
#     'AUDIENCE': None,
#     'ISSUER': None,

#     'AUTH_HEADER_TYPES': ('Bearer',), # Common practice for JWT
#     'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
#     'USER_ID_FIELD': 'id', # Assuming your custom User model uses 'id' as PK
#     'USER_ID_CLAIM': 'user_id', # Claim name for user ID in token

#     'TOKEN_TYPE_CLAIM': 'token_type',
#     'JTI_CLAIM': 'jti', # JWT ID claim for blacklist
#     'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

#     'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # For sliding tokens, if you use them
#     'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # For sliding tokens
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple' if not DEBUG else 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'courier': { # Logger for your courier app
            'handlers': ['console'],
            'level': 'DEBUG', # Set to DEBUG to see detailed API requests/responses
            'propagate': False,
        },
        'requests': { # Logger for the requests library
            'handlers': ['console'],
            'level': 'DEBUG', # Set to DEBUG to see detailed HTTP requests
            'propagate': False,
        },
        'urllib3': { # Logger for urllib3, used by requests
            'handlers': ['console'],
            'level': 'DEBUG', # Set to DEBUG to see detailed HTTP requests
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}
